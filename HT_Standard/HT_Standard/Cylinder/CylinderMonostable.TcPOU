<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="CylinderMonostable" Id="{a60690f5-9df7-4d3d-bfc8-0271fb0f4ee7}" SpecialFunc="None">
    <Declaration><![CDATA[/// Manage a monostable valve
/// use inGoToHomePos and inGoToWorkPos to command the valve
/// inGoToHomePos has precedence to inGoToWorkPos
FUNCTION_BLOCK PUBLIC CylinderMonostable
VAR_INPUT
    inReset      : BOOL; // Force the valve to stay in place
    inAckAlarm   : BOOL;
    inManualMode : BOOL;

    inGoToHomePos : BOOL;
    inGoToWorkPos : BOOL;

    inAtHomePos_sensor : BOOL; // feedback sensor to confirm home position
    inAtWorkPos_sensor : BOOL; // feedback sensor to confirm work position

    inTimingConfig : CylinderTimingConfig;

END_VAR
VAR_OUTPUT
    outValveWorkPos : BOOL;
    outInHomePos    : BOOL;
    outInWorkPos    : BOOL;
    outError        : BOOL;
    outErrorID      : UDINT;
    outErrorString  : STRING;
END_VAR
VAR
    _state : (RESET,
        IN_HOME_POS,
        MOVE_TO_WORK_POS,
        IN_WORK_POS,
        MOVE_TO_HOME_POS,
        ERROR);
    _stateBeforeError : INT;

    _bpManu : ButtonTrig;

    TON_ErrAS  : Tc2_Standard.TON;
    TON_ErrGS  : Tc2_Standard.TON;
    TOF_GS     : Tc2_Standard.TOF;
    TOF_AS     : Tc2_Standard.TOF;
    TON_GS_AS  : Tc2_Standard.TON;
    TON_WaitAS : Tc2_Standard.TON;
    TON_WaitGS : Tc2_Standard.TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// inGoToWorkPos can not be TRUE if inGoToHomePos is TRUE
inGoToWorkPos := inGoToWorkPos AND NOT inGoToHomePos;

IF inReset THEN
    _stateBeforeError := RESET;
    _state            := RESET;
END_IF

IF inAckAlarm AND (outErrorID <> 0) THEN
    outErrorID := 0;
    _state     := _stateBeforeError;
END_IF

_bpManu(inDisable := NOT inManualMode,
        inOn      := outInWorkPos,
        inError   := outError);

TON_ErrGS(in := (_state = MOVE_TO_HOME_POS) AND NOT inAtHomePos_sensor,
          pt := inTimingConfig.alarmToHomPos_time);

TON_ErrAS(in := (_state = MOVE_TO_WORK_POS) AND NOT inAtWorkPos_sensor,
          pt := inTimingConfig.alarmToWorkPos_time);

TOF_GS(IN := inGoToHomePos,
       PT := inTimingConfig.sensorFilterTime);

TOF_AS(IN := inGoToWorkPos,
       PT := inTimingConfig.sensorFilterTime);

TON_GS_AS(IN := inAtHomePos_sensor AND inAtWorkPos_sensor,
          PT := inTimingConfig.sensorFilterTime);

TON_WaitGS(in := inAtHomePos_sensor,
           PT := inTimingConfig.atHomePos_time);

TON_WaitAS(in := inAtWorkPos_sensor,
           PT := inTimingConfig.atWorkPos_time);

IF TON_GS_AS.Q THEN
    outErrorID        := eCylinderError.sensorHomeAndWorkBothActivated;
    _stateBeforeError := RESET;
    _state            := ERROR;
END_IF

CASE _state OF

RESET:
    IF NOT inReset THEN
        IF inAtHomePos_sensor THEN
            _state := IN_HOME_POS;
        ELSIF inAtWorkPos_sensor THEN
            _state := IN_WORK_POS;
        ELSIF outValveWorkPos THEN
            _state := MOVE_TO_WORK_POS;
        ELSE
            _state := MOVE_TO_HOME_POS;
        END_IF
    END_IF

IN_HOME_POS:
    IF inManualMode THEN
        IF _bpManu.outRisingEdge THEN
            _state := MOVE_TO_WORK_POS;
        END_IF
    ELSIF inGoToWorkPos THEN
        _state := MOVE_TO_WORK_POS;
    ELSIF NOT TOF_GS.Q THEN
        outErrorID        := eCylinderError.sensorInHomePosDisapeared;
        _stateBeforeError := MOVE_TO_HOME_POS;
        _state            := ERROR;
    END_IF

MOVE_TO_WORK_POS:
    IF TON_WaitAS.Q OR inManualMode THEN
        _state := IN_WORK_POS;
    ELSIF TON_ErrAS.Q THEN
        outErrorID        := eCylinderError.timeoutMoveInWorkPos;
        _stateBeforeError := MOVE_TO_WORK_POS;
        _state            := ERROR;
    END_IF

IN_WORK_POS:
    IF inManualMode THEN
        IF _bpManu.outRisingEdge THEN
            _state := MOVE_TO_HOME_POS;
        END_IF
    ELSIF inGoToHomePos THEN
        _state := MOVE_TO_HOME_POS;
    ELSIF NOT TOF_AS.Q THEN
        outErrorID        := eCylinderError.sensorInWorkPosDisapeared;
        _stateBeforeError := MOVE_TO_WORK_POS;
        _state            := ERROR;
    END_IF

MOVE_TO_HOME_POS:
    IF TON_WaitGS.Q OR inManualMode THEN
        _state := IN_HOME_POS;
    ELSIF TON_ErrGS.Q THEN
        outErrorID        := eCylinderError.timeoutHomeInWorkPos;
        _stateBeforeError := MOVE_TO_HOME_POS;
        _state            := ERROR;
    END_IF

ERROR:
    IF (outErrorID = 0) THEN
        outErrorID := eCylinderError.inErrorState;
    END_IF;

ELSE
    outErrorID := eCylinderError.uknownStepNumber;
    _state     := ERROR;
END_CASE

outInHomePos   := (_state = IN_HOME_POS);
outInWorkPos   := (_state = IN_WORK_POS);
outError       := (outErrorID <> 0);
outErrorID     := outErrorID;
outErrorString := TO_STRING(outErrorID);

IF (_state <> RESET) AND (_state <> ERROR) THEN
    outValveWorkPos := (_state = MOVE_TO_WORK_POS) OR (_state = IN_WORK_POS);
END_IF
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>